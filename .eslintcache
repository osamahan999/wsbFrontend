[{"/home/osama/projects/wsb/frontend/src/index.tsx":"1","/home/osama/projects/wsb/frontend/src/reportWebVitals.ts":"2","/home/osama/projects/wsb/frontend/src/App.tsx":"3","/home/osama/projects/wsb/frontend/src/helper.tsx":"4","/home/osama/projects/wsb/frontend/src/pages/Home/Home.tsx":"5","/home/osama/projects/wsb/frontend/src/pages/UserFeed/UserFeed.tsx":"6","/home/osama/projects/wsb/frontend/src/pages/Login/Login.tsx":"7","/home/osama/projects/wsb/frontend/src/pages/Register/Register.tsx":"8","/home/osama/projects/wsb/frontend/src/pages/Stock/Stock.tsx":"9","/home/osama/projects/wsb/frontend/src/components/navbar/Navbar.jsx":"10","/home/osama/projects/wsb/frontend/src/components/sidefiller/SidefillerRight.jsx":"11","/home/osama/projects/wsb/frontend/src/components/sidefiller/SidefillerLeft.jsx":"12","/home/osama/projects/wsb/frontend/src/components/sellbutton/Sell.tsx":"13","/home/osama/projects/wsb/frontend/src/pages/Profile/Profile.tsx":"14"},{"size":500,"mtime":1610154779278,"results":"15","hashOfConfig":"16"},{"size":425,"mtime":1610154779278,"results":"17","hashOfConfig":"16"},{"size":3840,"mtime":1610380465820,"results":"18","hashOfConfig":"16"},{"size":525,"mtime":1610154779278,"results":"19","hashOfConfig":"16"},{"size":1276,"mtime":1610154779278,"results":"20","hashOfConfig":"16"},{"size":7057,"mtime":1610383925644,"results":"21","hashOfConfig":"16"},{"size":2868,"mtime":1610154779278,"results":"22","hashOfConfig":"16"},{"size":2371,"mtime":1610154779278,"results":"23","hashOfConfig":"16"},{"size":20583,"mtime":1610379710729,"results":"24","hashOfConfig":"16"},{"size":1707,"mtime":1610380355144,"results":"25","hashOfConfig":"16"},{"size":220,"mtime":1610154779278,"results":"26","hashOfConfig":"16"},{"size":218,"mtime":1610158453903,"results":"27","hashOfConfig":"16"},{"size":2605,"mtime":1610378955994,"results":"28","hashOfConfig":"16"},{"size":4044,"mtime":1610386113208,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"upimto",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"32"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40","usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"32"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"32"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"32"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"32"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"59"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"59"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"32"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/home/osama/projects/wsb/frontend/src/index.tsx",[],["69","70"],"/home/osama/projects/wsb/frontend/src/reportWebVitals.ts",[],"/home/osama/projects/wsb/frontend/src/App.tsx",["71","72","73","74","75","76","77","78","79","80"],"import React, { useEffect, useState } from 'react';\nimport Navbar from './components/navbar/Navbar';\n\nimport styles from \"./App.module.css\";\nimport Home from './pages/Home/Home';\nimport Login from './pages/Login/Login';\nimport Register from './pages/Register/Register';\nimport { AxiosError, AxiosResponse } from 'axios';\nimport UserFeed from './pages/UserFeed/UserFeed';\nimport Stock from './pages/Stock/Stock';\nimport Profile from './pages/Profile/Profile';\n\nconst cookieToken = require('./helper');\n\nconst axios = require('axios');\n\nfunction App() {\n\n  const [currentPage, setCurrentPage] = useState('home');\n\n  const [currentUser, setCurrentUser] = useState<JSON | any>({});\n  const [isLoggedIn, setIsLoggedIn] = useState(false);\n\n  //for when logging out \n  const [isLoading, setIsLoading] = useState<boolean>(false);\n\n  const [currentStockInFocus, setCurrentStockInFocus] = useState<string>();\n\n  useEffect(() => {\n\n    let token = cookieToken.getToken();\n\n    if (token != 'fail') {\n      setIsLoading(true);\n\n      logIn(token);\n\n    }\n  }, [])\n\n\n  const logIn = (token: string) => {\n\n    axios.post(\"http://localhost:5000/user/loginWithToken\", {\n      token: token\n\n    }).then((response: AxiosResponse) => {\n      setCurrentUser(response.data[0]);\n      setCurrentPage('userfeed');\n      setIsLoggedIn(true);\n\n      setIsLoading(false);\n\n    }).catch((err: AxiosError) => {\n      alert(err);\n      setIsLoading(false);\n\n    })\n  }\n\n  /**\n   * Just like logIn, except does no updates except to currentUser\n   * @param token \n   */\n  const updateNavbar = (token: string) => {\n    axios.post(\"http://localhost:5000/user/loginWithToken\", {\n      token: token\n\n    }).then((response: AxiosResponse) => {\n      setCurrentUser(response.data[0]);\n\n    }).catch((err: AxiosError) => {\n      alert(err);\n\n    })\n  }\n\n  //can be deleted now?\n  useEffect(() => {\n\n\n    if (JSON.stringify(currentUser) == '{}') {\n      setCurrentPage('home')\n      setIsLoggedIn(false);\n\n    } else if (currentPage == 'stock') {\n      setIsLoggedIn(true);\n\n    } else {\n      setCurrentPage('userfeed');\n      setIsLoggedIn(true);\n    }\n\n\n  }, [currentUser])\n\n\n\n\n\n  const logout = () => {\n    let token = cookieToken.getToken();\n\n    setIsLoading(true);\n\n    axios.post(\"http://localhost:5000/user/logout\", {\n      token: token\n\n    }).then((response: AxiosResponse) => {\n      document.cookie = \"token=; expires=Thu, 01 Jan 1970 00:00:00 UTC;\";\n\n      setCurrentUser({});\n      setIsLoggedIn(false);\n      setCurrentPage('home');\n      setIsLoading(false);\n\n    }).catch((err: AxiosError) => {\n      alert(err.response);\n      setIsLoading(false);\n\n    })\n  }\n\n  if (isLoading) return (<div className={styles.LoadingDiv}>Loading</div>);\n\n  return (\n    <div className={styles.App}>\n      <Navbar isLoggedIn={isLoggedIn}\n        currentUser={currentUser}\n        logOut={() => logout()}\n        currentPage={currentPage}\n        setCurrentPage={(e: string) => setCurrentPage(e)}\n      />\n      <div>\n        {currentPage == \"home\" && <Home />}\n\n\n        {currentPage == \"login\" && <Login setUser={(e: JSON) => setCurrentUser(e)} />}\n        {currentPage == \"register\" && <Register />}\n\n        {currentPage == \"userfeed\" &&\n          <UserFeed\n            user={currentUser}\n            setCurrentStock={(e: string) => setCurrentStockInFocus(e)}\n            setCurrentPage={(e: string) => setCurrentPage(e)}\n            updateNavbar={() => updateNavbar(cookieToken.getToken())}\n          />}\n\n        {currentPage == \"stock\" &&\n          <Stock stock={currentStockInFocus}\n            updateNavbar={() => updateNavbar(cookieToken.getToken())}\n            currentUser={currentUser}\n          />}\n\n        {currentPage == \"profile\" &&\n          <Profile\n            currentUser={currentUser}\n          />}\n\n      </div>\n\n\n\n    </div>\n  );\n}\n\n\nexport default App;\n","/home/osama/projects/wsb/frontend/src/helper.tsx",["81","82"],"/**\n * Returns the token from the cookies\n * or fail if no cookie with token\n */\nconst getToken = () => {\n\n    let cookies = document.cookie.split(';');\n    let ret = '';\n\n    if (cookies[0] != \"\") {\n        cookies.forEach((keyPair) => {\n            let subArray: Array<string> = keyPair.split('=');\n            let key: string = subArray[0].trim();\n            let value: string = subArray[1].trim();\n\n            if (key == \"token\") ret = value;\n        })\n    } else return 'fail';\n\n    return ret;\n}\n\nexport { getToken }","/home/osama/projects/wsb/frontend/src/pages/Home/Home.tsx",["83","84","85"],"import React from 'react';\nimport SidefillerLeft from '../../components/sidefiller/SidefillerLeft';\nimport SidefillerRight from '../../components/sidefiller/SidefillerRight';\nimport Carousel from 'react-elastic-carousel';\n\nimport styles from './Home.module.css';\n\nimport GTO from '../../assets/grandtheftoptions.png';\nimport deskImage from '../../assets/deskImage.webp';\nimport stonksgoup from '../../assets/stonksgoup.jpeg';\n\nfunction Home() {\n  return (\n    <div className={styles.Home}>\n\n\n      <SidefillerLeft />\n\n      <div className={styles.Content}>\n\n        <Carousel>\n          <div className={styles.CarouselDiv}>\n            <div>Welcome to <b>Wallstreet Bets Tycoon</b></div>\n            <img className={styles.Image} src={GTO}></img>\n\n          </div>\n\n          <div className={styles.CarouselDiv}>\n            <div>Why use Robinhood which crashes all the time when you can use this site?</div>\n            <img className={styles.Image} src={deskImage}></img>\n\n          </div>\n\n          <div className={styles.CarouselDiv}>\n            <div>This could be you!</div>\n            <img className={styles.Image} src={stonksgoup}></img>\n\n          </div>\n\n\n\n        </Carousel>\n\n\n\n\n\n\n      </div>\n\n      <SidefillerRight />\n\n    </div>\n  );\n}\n\nexport default Home;\n","/home/osama/projects/wsb/frontend/src/pages/UserFeed/UserFeed.tsx",["86","87","88","89","90","91","92","93","94"],"import { AxiosError, AxiosResponse } from 'axios';\nimport React, { useEffect, useState } from 'react';\n\n\nimport SidefillerLeft from '../../components/sidefiller/SidefillerLeft';\nimport SidefillerRight from '../../components/sidefiller/SidefillerRight';\n\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\n\nimport styles from './UserFeed.module.css';\nimport { TextField } from '@material-ui/core';\nimport Sell from '../../components/sellbutton/Sell';\n\nconst axios = require('axios');\n\n\nfunction UserFeed(props: any) {\n\n    const [username, setUsername] = useState('');\n    const [totalMoney, setTotalMoney] = useState(0);\n    const [userId, setUserId] = useState(-1);\n\n    const [searchInput, setSearchInput] = useState('');\n    const [stocksInDropdown, setStocksInDropdown] = useState<any[]>([]);\n\n    const [ownedStocks, setOwnedStocks] = useState<Array<JSON>>([]);\n    const [ownedContracts, setOwnedContracts] = useState<Array<JSON>>([]);\n\n    useEffect(() => {\n        setUsername(props.user.username);\n        setTotalMoney(props.user.total_money);\n        setUserId(props.user.user_id);\n\n    }, [])\n\n    useEffect(() => {\n        getUserStocks();\n        getUserContracts();\n\n    }, [userId]);\n\n\n    const getUserStocks = () => {\n        if (userId != -1) {\n            axios.get(\"http://localhost:5000/transaction/getSpecificPosition\", {\n                params: {\n                    'userId': userId\n                }\n            }).then((response: AxiosResponse) => {\n                setOwnedStocks(response.data.positions);\n            }).catch((err: AxiosError) => {\n                console.log(err);\n            })\n        }\n    }\n\n    const getUserContracts = () => {\n        if (userId != -1) {\n            axios.get(\"http://localhost:5000/transaction/getSpecificOptionPosition\", {\n                params: {\n                    'userId': userId\n                }\n            }).then((response: AxiosResponse) => {\n                setOwnedContracts(response.data.positions);\n            }).catch((err: AxiosError) => {\n                console.log(err.response);\n            })\n        }\n    }\n\n    useEffect(() => {\n\n        if (searchInput.length > 0) {\n\n            axios.get(\"http://localhost:5000/stockData/searchBySymbol\", {\n                params: {\n                    'input': searchInput\n                }\n            }).then((response: AxiosResponse) => {\n                (response.data.length == undefined || response.data.length == 0) ? setStocksInDropdown([]) : setStocksInDropdown(response.data);\n            }).catch((err: AxiosError) => {\n                setStocksInDropdown([]);\n\n            })\n        } else {\n            setStocksInDropdown([]);\n        }\n\n    }, [searchInput])\n\n\n\n\n    return (\n\n        <div className={styles.UserFeed}>\n\n            <SidefillerLeft />\n\n\n            <div className={styles.ContentContainer}>\n                {/* search bar */}\n                <div className={styles.SearchbarContainer}>\n\n\n                    <Autocomplete\n                        id=\"combo-box-demo\"\n                        autoComplete={true}\n                        clearOnBlur={false}\n                        options={stocksInDropdown}\n                        filterOptions={(options, state) => options}\n                        freeSolo={true}\n                        getOptionLabel={(option) => option.symbol}\n                        style={{ width: 300 }}\n                        renderInput={(params) =>\n                            <TextField {...params}\n                                label=\"Search by Ticker\"\n                                onChange={(e) => { setSearchInput(e.target.value); }}\n                                variant=\"outlined\"\n                            />\n                        }\n\n                        onChange={(event, value) => {\n                            props.setCurrentStock(value.symbol);\n                        }}\n\n\n                    />\n\n\n                    <button onClick={() => {\n\n\n                        props.setCurrentPage('stock');\n\n                    }}>find yolo</button>\n\n\n                </div>\n\n\n                <div>\n                    <h3>Owned shares:</h3>\n                    {ownedStocks.map((stock: JSON | any) => {\n                        return (\n                            <div className={styles.PositionData}>\n                                You have {(stock.amt_of_purchase - stock.amt_sold) + \" share of \" + stock.stock_symbol + \" stock, purchased at $\" + stock.price_at_purchase}\n                                <button className={styles.GoToButton} onClick={() => {\n                                    props.setCurrentStock(stock.stock_symbol);\n                                    props.setCurrentPage('stock');\n                                }}>Go to {stock.stock_symbol} </button>\n                                <Sell\n                                    userId={userId}\n                                    purchaseId={stock.purchase_id}\n                                    ticker={stock.stock_symbol}\n\n                                    amtOwned={stock.amt_of_purchase - stock.amt_sold}\n                                    isOption={false}\n                                    updateStockPositions={() => getUserStocks()}\n                                    updateNavbar={() => props.updateNavbar()}\n                                />\n                            </div>);\n                    })}\n\n                    <h3>Owned contracts</h3>\n                    {ownedContracts != null && ownedContracts.map((contract: JSON | any) => {\n                        if (contract != null) return (\n                            <div className={styles.PositionData}>\n                                <h4>{contract.description}</h4>\n                                <button className={styles.GoToButton} onClick={() => {\n                                    props.setCurrentStock(contract.underlying);\n                                    props.setCurrentPage('stock');\n                                }}>Go to {contract.underlying} </button>\n                                {(contract.amt_of_contracts - contract.amt_sold)\n                                    + \" contracts worth $\" + contract.ask + \" purchased for $\" + contract.price_at_purchase / 100}\n                                <Sell\n                                    userId={userId}\n                                    purchaseId={contract.option_purchase_id}\n                                    ticker={contract.option_symbol}\n\n                                    amtOwned={(contract.amt_of_contracts - contract.amt_sold)}\n                                    isOption={true}\n                                    updateStockPositions={() => getUserContracts()}\n                                    updateNavbar={() => props.updateNavbar()}\n                                />\n                            </div>\n                        );\n                    })}\n                </div>\n            </div>\n            <SidefillerRight />\n\n\n        </div>\n    );\n}\n\nexport default UserFeed;\n","/home/osama/projects/wsb/frontend/src/pages/Login/Login.tsx",["95","96"],"import { AxiosError, AxiosResponse } from 'axios';\nimport React, { useState } from 'react';\n\nimport SidefillerLeft from '../../components/sidefiller/SidefillerLeft';\nimport SidefillerRight from '../../components/sidefiller/SidefillerRight';\n\nimport styles from './Login.module.css';\n\nconst axios = require(\"axios\");\n\nfunction Login(props: any) {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [message, setMessage] = useState('');\n\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    const handleSubmit = () => {\n        if (username == '' || password == '') setMessage(\"Cannot have empty input\");\n        else {\n\n            //tell client loading \n            setIsLoading(true);\n\n\n            axios.post(\"http://localhost:5000/user/loginWithoutToken\", {\n                username: username,\n                password: password\n\n            }).then((response: AxiosResponse) => {\n                setMessage(\"Success\");\n\n\n                let now = new Date();\n                now.setTime(now.getTime() + (1000 * 3600000)); //lasts 3.6 million seconds\n\n                let cookie = \"token = \" + response.data.token + \"; SameSite=None; Secure; expires=\" + now.toUTCString();\n                document.cookie = cookie;\n                props.setUser(response.data);\n\n                setIsLoading(false);\n\n                //add token and shit to localstorage\n            }).catch((err: AxiosError) => {\n                if (err.response != null) setMessage(err.response.data);\n                setIsLoading(false);\n\n\n            })\n        }\n\n\n\n    }\n\n\n    /**\n     * If isLoading ->\n     *  return (<div> big ass cock</div>)\n     */\n\n    //uhh do i put it here?\n\n    if (isLoading) {\n        return (<div>Logging you In</div>);\n    }\n\n\n\n    return (\n\n        <div className={styles.Login}>\n\n            <SidefillerLeft />\n            <div className={styles.ContentContainer}>\n                <div>\n\n                    <div className={styles.ResponseDiv}>{message}</div>\n                    {/* Username, password */}\n                    <div className={styles.LoginInputsContainer}>\n                        <div className={styles.InputBox}>\n                            <p>Username:</p>\n                            <input onChange={(e) => setUsername(e.target.value)}></input>\n                        </div>\n                        <div className={styles.InputBox}>\n                            <p>Password:</p>\n                            <input onChange={(e) => setPassword(e.target.value)}></input>\n                        </div>\n\n                        <button onClick={() => handleSubmit()} className={styles.LoginButton}>$$$$$</button>\n\n\n\n                    </div>\n\n                </div>\n\n            </div>\n            <SidefillerRight />\n\n\n        </div>\n    );\n}\n\nexport default Login;\n","/home/osama/projects/wsb/frontend/src/pages/Register/Register.tsx",["97","98"],"import { AxiosError, AxiosResponse } from 'axios';\nimport React, { useState } from 'react';\n\nimport SidefillerLeft from '../../components/sidefiller/SidefillerLeft';\nimport SidefillerRight from '../../components/sidefiller/SidefillerRight';\n\n\nimport styles from './Register.module.css';\n\nconst axios = require(\"axios\");\n\nfunction Register(props: any) {\n    const [username, setUsername] = useState('');\n    const [password, setPassword] = useState('');\n    const [email, setEmail] = useState('');\n\n    const [message, setMessage] = useState('');\n\n    const handleSubmit = () => {\n        if (username == '' || password == '') setMessage(\"Cannot have empty input\");\n        else {\n            axios.post(\"http://localhost:5000/user/userRegister\", {\n                email: email,\n                username: username,\n                password: password\n\n            }).then((response: AxiosResponse) => {\n                setMessage(response.data);\n            }).catch((err: AxiosError) => {\n                if (err.response != null) setMessage(err.response.data);\n            })\n        }\n\n\n\n    }\n\n    return (\n\n        <div className={styles.Register}>\n\n            <SidefillerLeft />\n            <div className={styles.ContentContainer}>\n                <div>\n\n                    <div className={styles.ResponseDiv}>{message}</div>\n\n                    <div className={styles.RegisterInputsContainer}>\n                        <div className={styles.InputBox}>\n                            <p>Email:</p>\n                            <input type=\"email\" onChange={(e) => setEmail(e.target.value)}></input>\n                        </div>\n                        <div className={styles.InputBox}>\n                            <p>Username:</p>\n                            <input onChange={(e) => setUsername(e.target.value)}></input>\n                        </div>\n                        <div className={styles.InputBox}>\n                            <p>Password:</p>\n                            <input onChange={(e) => setPassword(e.target.value)}></input>\n                        </div>\n\n                        <button onClick={() => handleSubmit()} className={styles.RegisterButton}>Start losing money now!</button>\n\n\n\n                    </div>\n\n                </div>\n\n            </div>\n            <SidefillerRight />\n\n\n        </div>\n    );\n}\n\nexport default Register;\n","/home/osama/projects/wsb/frontend/src/pages/Stock/Stock.tsx",["99","100","101","102","103","104","105","106","107","108","109","110","111","112","113","114","115","116","117","118","119","120","121","122","123"],"import Modal from \"@material-ui/core/Modal\";\nimport { AxiosError, AxiosResponse } from 'axios';\nimport React, { useEffect, useState } from 'react';\nimport Sell from \"../../components/sellbutton/Sell\";\n\n\n\n\n\nimport styles from './Stock.module.css';\n\nconst axios = require('axios');\nconst cookieToken = require('../../helper');\n\n\nfunction Stock(props: any) {\n\n    const [currentStock, setCurrentStock] = useState<JSON | any>();\n\n    const [userPw, setUserPw] = useState<string>('');\n\n    //states for purchasing stocks\n    const [amtStocksToPurchase, setAmtStocksToPurchase] = useState<number>(0);\n    const [stockPurchaseModalOpen, setStockPurchaseModalOpen] = useState<boolean>(false);\n    const [message, setMessage] = useState<string>('');\n\n    //States for purchasing options \n    const [amtOfContractsToPurchase, setAmtOfContractsToPurchase] = useState<number>(0);\n    const [optionPurchaseModalOpen, setOptionPurchaseModalOpen] = useState<boolean>(false);\n\n    //Option data\n    const [optionInView, setOptionInView] = useState<JSON | any>();\n    const [optionExpirations, setOptionExpirations] = useState<Array<string>>([]);\n    const [pulledOptions, setPulledOptions] = useState<Array<JSON>>([]);\n    const [expirationInView, setExpirationInView] = useState<string>();\n\n    const [optionType, setOptionType] = useState<string>('call');\n\n    const [loadingOptions, setLoadingOptions] = useState<boolean>(false);\n    const [loadingPurchases, setLoadingPurchases] = useState<boolean>(false);\n\n\n    const [positions, setPositions] = useState<Array<JSON>>([]);\n    const [optionPositions, setOptionPositions] = useState<Array<JSON>>([]);\n\n    /**\n     * Initial runs for data\n     */\n    useEffect(() => {\n\n        //Get initial stock data\n        getCurrentStockDetails();\n\n        /**\n         * gets the stock data every 10 seconds to update the client side data\n         * \n         * TODO: \n         * \n         * Perhaps implement these websockets\n         * https://documentation.tradier.com/brokerage-api/streaming/wss-market-websocket\n         * https://documentation.tradier.com/brokerage-api/streaming/create-market-session\n         * \n         * This may give much more flexibility\n         */\n\n        const interval = setInterval(() => {\n            getCurrentStockDetails();\n\n        }, 10000)\n\n\n\n        getStockPositions();\n        getStockOptionPositions();\n\n        return () => clearInterval(interval);\n\n    }, [])\n\n    //Gets stock details\n    const getCurrentStockDetails = () => {\n        axios.get(\"http://localhost:5000/stockData/getStockQuote\", {\n            params: {\n                'symbol': props.stock\n            }\n        }).then((response: AxiosResponse) => {\n            setCurrentStock(response.data);\n        }).catch((err: AxiosError) => {\n            alert(err.response);\n\n        })\n    }\n\n    const getStockPositions = () => {\n        //Gets your positions on this stock\n        axios.get(\"http://localhost:5000/transaction/getSpecificPosition\", {\n            params: {\n                \"userId\": props.currentUser.user_id,\n                \"stockSymbol\": props.stock\n            }\n        }).then((response: AxiosResponse) => {\n\n            setPositions(response.data.positions)\n        }).catch((error: AxiosError) => {\n            console.log(error.response);\n        })\n    }\n\n    const getStockOptionPositions = () => {\n        //Gets your option positions on this stock\n        axios.get(\"http://localhost:5000/transaction/getSpecificOptionPosition\", {\n            params: {\n                \"userId\": props.currentUser.user_id,\n                \"stockSymbol\": props.stock\n            }\n        }).then((response: AxiosResponse) => {\n\n            setOptionPositions(response.data.positions)\n        }).catch((error: AxiosError) => {\n            console.log(error.response);\n        })\n    }\n\n\n    useEffect(() => {\n        expirationInView != undefined &&\n            getOptions(currentStock.symbol, expirationInView);\n\n    }, [optionType])\n\n\n    useEffect(() => {\n\n\n        axios.get(\"http://localhost:5000/stockData/getExpirations\", {\n            params: {\n                'symbol': props.stock\n            }\n        }).then((response: AxiosResponse) => {\n            setOptionExpirations(response.data);\n\n        }).catch((err: AxiosError) => {\n            setOptionExpirations([]);\n\n        })\n    }, [currentStock])\n\n    /**\n     * Purchases the amt of stocks specified for the logged in user\n     */\n    const purchaseStock = () => {\n        if (amtStocksToPurchase > 0) {\n            axios.post(\"http://localhost:5000/transaction/purchaseStock\", {\n                token: cookieToken.getToken(),\n                password: userPw,\n                stockSymbol: currentStock.symbol,\n                stockName: currentStock.description,\n                stockPrice: currentStock.ask,\n                amtOfStocks: amtStocksToPurchase,\n                exchange: currentStock.exch\n            }).then((response: AxiosResponse) => {\n\n                setMessage(response.data);\n\n                getStockPositions();\n                props.updateNavbar();\n                setLoadingPurchases(false);\n\n\n            }).catch((err: AxiosError) => {\n                setMessage(\"Error purchasing\");\n                setLoadingPurchases(false);\n\n            })\n        } else {\n            setMessage(\"Must be amt > 0\");\n            setLoadingPurchases(false);\n        }\n    }\n\n\n    /**\n    * Purchases the amt of options specified for the logged in user\n    */\n    const purchaseOption = () => {\n        if (amtOfContractsToPurchase > 0) {\n            axios.post(\"http://localhost:5000/transaction/purchaseOption\", {\n                token: cookieToken.getToken(),\n                password: userPw,\n                optionSymbol: optionInView.symbol,\n                optionPrice: (optionInView.ask * 100), //100x shares\n                amtOfContracts: amtOfContractsToPurchase\n            }).then((response: AxiosResponse) => {\n\n                setMessage(response.data);\n\n                getStockOptionPositions();\n                props.updateNavbar();\n                setLoadingPurchases(false);\n\n            }).catch((err: AxiosError) => {\n                setMessage(\"Error purchasing\");\n                setLoadingPurchases(false);\n\n            })\n        } else {\n            setMessage(\"Must be amt > 0\");\n            setLoadingPurchases(false);\n        }\n    }\n\n\n    /**\n     * Gets the options at a specified date for the stock\n     * @param symbol \n     * @param date \n     */\n    const getOptions = (symbol: string, date: string) => {\n        setLoadingOptions(true);\n\n        axios.get(\"http://localhost:5000/stockData/getOptionsOnDate\", {\n            params: {\n                'symbol': symbol,\n                'expiration': date,\n                'optionType': optionType\n            }\n        }).then((response: AxiosResponse) => {\n            setPulledOptions(response.data);\n            setLoadingOptions(false);\n        }).catch((err: AxiosError) => {\n            setPulledOptions([]);\n            setLoadingOptions(false);\n\n\n        })\n    }\n\n\n    return (\n\n        <div className={styles.Stock}>\n\n\n            <div className={styles.ContentContainer}>\n                {currentStock != undefined &&\n                    <div className={styles.container}>\n                        <div className={styles.StockData}>\n                            <h2>{currentStock.description}</h2>\n                            <h2>open: ${currentStock.open}</h2>\n                            <h2>close: ${currentStock.last}</h2>\n                            <h2>volume: {currentStock.volume}</h2>\n                            <h2>Current Cost: ${currentStock.ask}</h2>\n\n                            <div>\n\n\n                                <button onClick={() => setStockPurchaseModalOpen(true)}>Purchase {props.stock}</button></div>\n                            <div>\n\n                            </div>\n                            <Modal\n                                className={styles.ModalContainer}\n                                open={stockPurchaseModalOpen}\n                                onClose={() => {\n                                    setStockPurchaseModalOpen(false);\n                                    setAmtStocksToPurchase(0);\n                                    setMessage(\"\");\n                                    setUserPw(\"\");\n\n\n                                }}\n                            >\n                                {\n                                    loadingPurchases ?\n                                        <div>Purchasing</div>\n                                        :\n\n                                        <div className={styles.Modal}>\n                                            <div>Amt:</div>\n                                            <input type=\"number\" max=\"1000\" min=\"1\" onChange={(e) => setAmtStocksToPurchase(+(e.target.value))}></input>\n                                            <div>\n                                                <div>Your tendies after purchasing {amtStocksToPurchase} {props.stock} stocks:\n\n                                        ${(Math.round(1000 * (+(props.currentUser.total_money) - ((+amtStocksToPurchase) * (+currentStock.ask)))) / 1000)}</div>\n                                            </div>\n                                            <div>\n                                                <p>Your password:</p>\n                                                <input onChange={(e) => setUserPw(e.target.value)}></input>\n                                                <button onClick={() => {\n                                                    if (+(props.currentUser.total_money) < ((+amtStocksToPurchase) * (+currentStock.ask))) setMessage('Not enough funds!')\n                                                    else {\n                                                        setLoadingPurchases(true);\n                                                        purchaseStock();\n                                                    }\n                                                }}>Purchase {amtStocksToPurchase + \" of \" + props.stock}</button>\n                                            </div>\n\n\n                                            <h2 className={styles.Error}>{message}</h2>\n\n                                        </div>\n                                }\n                            </Modal>\n                            <br></br>\n                        </div>\n\n                        <h1>Options</h1>\n\n                        <div className={styles.OptionsContainer}>\n\n                            <select >\n                                {(optionExpirations != undefined && optionExpirations.length != 0) ?\n                                    <option onClick={() => {\n                                        setPulledOptions([]);\n                                        setExpirationInView(\"\");\n                                        setOptionInView(undefined);\n                                    }}>Select an option</option> : <option>No options For {props.stock}</option>}\n\n                                {(optionExpirations != undefined && optionExpirations.length != 0) &&\n                                    optionExpirations.map((date) => {\n                                        return (\n                                            <option className={styles.Option}\n                                                onClick={() => {\n                                                    getOptions(props.stock, date);\n                                                    setOptionInView(undefined);\n                                                    setExpirationInView(date);\n                                                }}>\n                                                {date}</option>\n                                        );\n                                    })}\n                            </select>\n\n\n                        </div>\n\n                    </div>\n                }\n\n            </div>\n\n\n            {loadingOptions ? <div className={styles.PulledOptions}>loading</div> : <div className={styles.PulledOptions}>\n                <div className={styles.DescriptionContainer}>\n\n                    <h2>{expirationInView}</h2>\n                    {(expirationInView != undefined && expirationInView != \"\") &&\n                        <button className={styles.OptionType}\n                            onClick={() => {\n                                setOptionInView(undefined);\n                                if (optionType == 'call') {\n                                    setOptionType('put');\n                                }\n                                else if (optionType == 'put') {\n                                    setOptionType('call');\n                                }\n\n                            }}>\n                            Show {optionType == 'call' ? \"put\" : \"call\"}\n                        </button>}\n\n                    {(pulledOptions != undefined || pulledOptions != []) && pulledOptions.map((option: any) => {\n                        return (<p onClick={() => setOptionInView(option)} className={styles.Option}>{option.description + \" at $\" + option.ask}</p>)\n                    })}\n\n                </div>\n                {optionInView != undefined &&\n                    <div className={styles.OptionDetailsContainer}>\n                        <h2>Option Details</h2>\n\n                        <button onClick={() => setOptionPurchaseModalOpen(true)}>Purchase contract</button>\n                        <Modal\n                            className={styles.ModalContainer}\n                            open={optionPurchaseModalOpen}\n                            onClose={() => {\n                                setOptionPurchaseModalOpen(false);\n                                setAmtOfContractsToPurchase(0);\n                                setMessage(\"\");\n                                setUserPw(\"\");\n\n\n                            }}\n                        >\n                            {\n                                loadingPurchases ? <div>Purchasing</div>\n                                    :\n                                    <div className={styles.Modal}>\n                                        <div><b>Amt:</b></div>\n                                        <div><input type=\"number\" max=\"1000\" min=\"1\" onChange={(e) => setAmtOfContractsToPurchase(+(e.target.value))}></input>\n                                    Total: ${100 * amtOfContractsToPurchase * optionInView.ask}</div>\n                                        <div>\n                                            <div>Your tendies after purchasing {amtOfContractsToPurchase} {optionInView.description} contracts:\n\n                                        ${(Math.round(1000 * (+(props.currentUser.total_money) - ((+amtOfContractsToPurchase) * (100 * +optionInView.ask)))) / 1000)}</div>\n                                        </div>\n                                        <div>\n                                            <p><b>Your password:</b></p>\n                                            <input onChange={(e) => setUserPw(e.target.value)}></input>\n                                            <button onClick={() => {\n                                                if (+(props.currentUser.total_money) < ((+amtOfContractsToPurchase) * (+optionInView.ask))) setMessage('Not enough funds!')\n                                                else {\n                                                    setLoadingPurchases(true);\n                                                    purchaseOption();\n                                                }\n                                            }}>Purchase {amtOfContractsToPurchase + \" of this contract\"}</button>\n                                        </div>\n\n\n                                        <h2 className={styles.Error}>{message}</h2>\n\n                                    </div>\n                            }\n                        </Modal>\n\n\n                        <p>{optionInView.description}</p>\n                        <p><b>Cost of Contract (100x shares): </b>${optionInView.ask}</p>\n\n                        <p>Volume: {optionInView.volume}</p>\n\n                        <p>Contract Size: {optionInView.contract_size}</p>\n                        <p>Low : ${optionInView.low} -- $High: {optionInView.high} </p>\n\n                        <div>\n                            <h2>Greeks</h2>\n                            {true &&\n                                <div className={styles.GreeksContainer}>\n                                    {Object.keys(optionInView.greeks).map((key) => {\n                                        return (<p>{key + \": \" + optionInView.greeks[key]}</p>)\n                                    })}\n                                </div>\n\n                            }\n\n                        </div>\n\n                    </div>\n\n                }\n            </div>}\n\n\n            <div className={styles.ContentContainer}>\n                <div className={styles.StockPositions}>\n                    <h2>Your {props.stock} contracts</h2>\n\n                    {(optionPositions != undefined && optionPositions.length != 0) &&\n                        optionPositions.map((position: JSON | any) => {\n\n                            if (position != null) {\n                                return (\n                                    <div>\n                                        <h3>{position.description}</h3>\n                                        <div>You have {(position.amt_of_contracts - position.amt_sold) + \" \"}\n                                            {(position.amt_of_contracts - position.amt_sold) == 1 ? \"contract \" : \"contracts \"}\n                                            remaining which you purchased for ${position.price_at_purchase + \" each \"}\n                                        </div>\n                                        <div>Currently worth ${position.ask * 100}  expiring on {position.expiration_date}</div>\n\n                                        <Sell\n                                            userId={props.currentUser.user_id}\n                                            purchaseId={position.option_purchase_id}\n                                            ticker={position.symbol}\n\n                                            amtOwned={position.amt_of_contracts - position.amt_sold}\n                                            isOption={true}\n                                            updateNavbar={() => props.updateNavbar()}\n                                            updateStockPositions={() => getStockOptionPositions()}\n                                        />\n                                    </div>\n                                );\n                            }\n\n                        })}\n\n                </div>\n\n\n                <div className={styles.StockPositions}>\n                    <h2>Your {props.stock} stocks</h2>\n\n                    {(positions != undefined && positions.length != 0) &&\n                        positions.map((position: JSON | any) => {\n                            if (position != null) {\n                                return (\n                                    <div> You have {position.amt_of_purchase - position.amt_sold + \" \"}\n                                        {(position.amt_of_purchase - position.amt_sold) == 1 ? \"share \" : \"shares\"} in\n                                        {\" \" + props.stock} which you purchased at ${position.price_at_purchase + \" \"}\n                                     on {(new Date(position.date_purchased)).toDateString()}\n\n                                        <Sell\n                                            userId={props.currentUser.user_id}\n                                            purchaseId={position.purchase_id}\n                                            ticker={props.stock}\n\n                                            amtOwned={position.amt_of_purchase - position.amt_sold}\n                                            isOption={false}\n                                            updateNavbar={() => props.updateNavbar()}\n                                            updateStockPositions={() => getStockPositions()}\n                                        />\n                                    </div>\n                                );\n                            }\n\n                        })}\n                </div>\n\n            </div>\n\n\n        </div >\n    );\n}\n\nexport default Stock;\n","/home/osama/projects/wsb/frontend/src/components/navbar/Navbar.jsx",["124","125","126"],"import React from 'react';\n\nimport styles from './Navbar.module.css';\nimport logo from '../../assets/logo.jpeg';\n\n\nfunction Navbar(props) {\n\n\n\n  return (\n    <div className={styles.Navbar}>\n      <div className={styles.HomeContainer}>\n\n        <img src={logo} className={styles.Logo} onClick={() => {\n          if (props.isLoggedIn)\n            props.setCurrentPage('userfeed');\n          else\n            props.setCurrentPage('home');\n        }}></img>\n      </div>\n\n\n      {props.isLoggedIn &&\n        <div className={styles.UserData}>\n          <p className={styles.Data}>Username: {props.currentUser.username}</p>\n          <p className={styles.Data}>Your tendie funds: ${props.currentUser.total_money}</p>\n\n        </div>\n      }\n\n      {!props.isLoggedIn ?\n        <div className={styles.LoginRegisterContainer}>\n          <div className={styles.OptionContainer}>\n            {props.currentPage != 'login' &&\n              <div className={styles.Option} onClick={() => props.setCurrentPage('login')}>Log in</div>\n            }\n          </div>\n\n          <div className={styles.OptionContainer}>\n            {props.currentPage != 'register' && <div className={styles.Option} onClick={() => props.setCurrentPage('register')}>Register</div>\n            }\n          </div>\n        </div>\n        :\n        <div className={styles.LoginRegisterContainer}>\n\n          <div className={styles.Option} onClick={() =>\n            props.setCurrentPage('profile')}\n          > Profile</div>\n\n\n          <div className={styles.Option} onClick={() => {\n            props.logOut();\n            props.setCurrentPage('home');\n          }}>Logout</div>\n        </div>\n      }\n\n    </div>\n  );\n}\n\nexport default Navbar;\n",["127","128"],"/home/osama/projects/wsb/frontend/src/components/sidefiller/SidefillerRight.jsx",[],"/home/osama/projects/wsb/frontend/src/components/sidefiller/SidefillerLeft.jsx",[],"/home/osama/projects/wsb/frontend/src/components/sellbutton/Sell.tsx",["129"],"import React, { useState } from 'react';\nimport { Button } from '@material-ui/core';\nimport styles from './Sell.module.css';\nimport { AxiosError, AxiosResponse } from 'axios';\n\nconst axios = require('axios');\n\nfunction Sell(props: any) {\n    const [amtToSell, setAmtToSell] = useState<number>(0);\n    const [isLoading, setIsLoading] = useState<boolean>(false);\n\n    /**\n     * Type of sale\n     */\n    const sellInvoked = () => {\n        props.isOption ? sellOption() : sellStock();\n    }\n\n    const sellOption = () => {\n\n        setIsLoading(true);\n        if (amtToSell <= props.amtOwned) {\n            axios.post(\"http://localhost:5000/transaction/sellContract\", {\n                userId: props.userId,\n                optionPurchaseId: props.purchaseId,\n                amtToSell: amtToSell,\n                optionSymbol: props.ticker\n\n            }).then((response: AxiosResponse) => {\n                console.log(response);\n\n                props.updateNavbar();\n                props.updateStockPositions();\n                setIsLoading(false);\n            }).catch((err: AxiosError) => {\n                console.log(err.response);\n                setIsLoading(false);\n\n            })\n        } else alert(\"No, you dont own that many\");\n    }\n\n\n    const sellStock = () => {\n        setIsLoading(true);\n        if (amtToSell <= props.amtOwned) {\n\n            axios.post(\"http://localhost:5000/transaction/sellStock\", {\n                userId: props.userId,\n                purchaseId: props.purchaseId,\n                amtToSell: amtToSell,\n                stockSymbol: props.ticker\n\n            }).then((response: AxiosResponse) => {\n\n                props.updateNavbar();\n                props.updateStockPositions();\n                setIsLoading(false);\n            }).catch((err: AxiosError) => {\n                setIsLoading(false);\n\n            })\n        } else alert(\"No, you dont own that many\");\n    }\n\n    if (isLoading) return <div>Selling</div>;\n    return (\n        <div className={styles.SellContainer}>\n\n            {props.amtOwned != 0 &&\n                <div>\n\n                    <input onChange={(e) => setAmtToSell(+e.target.value)} type=\"number\" max={props.amtOwned}></input>\n                    {/* <button >Sell  </button> */}\n                    <Button\n                        onClick={() => sellInvoked()}\n                        variant=\"contained\"\n                        disabled={(amtToSell > props.amtOwned)}\n\n\n                    >Sell {amtToSell}\n\n                    </Button>\n                </div>\n            }\n\n\n\n        </div>\n    );\n}\n\nexport default Sell;\n","/home/osama/projects/wsb/frontend/src/pages/Profile/Profile.tsx",["130","131","132","133","134","135","136","137"],{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":33,"column":15,"nodeType":"144","messageId":"145","endLine":33,"endColumn":17},{"ruleId":"142","severity":1,"message":"146","line":82,"column":37,"nodeType":"144","messageId":"145","endLine":82,"endColumn":39},{"ruleId":"142","severity":1,"message":"146","line":86,"column":28,"nodeType":"144","messageId":"145","endLine":86,"endColumn":30},{"ruleId":"147","severity":1,"message":"148","line":95,"column":6,"nodeType":"149","endLine":95,"endColumn":19,"suggestions":"150"},{"ruleId":"142","severity":1,"message":"146","line":135,"column":22,"nodeType":"144","messageId":"145","endLine":135,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":138,"column":22,"nodeType":"144","messageId":"145","endLine":138,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":139,"column":22,"nodeType":"144","messageId":"145","endLine":139,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":141,"column":22,"nodeType":"144","messageId":"145","endLine":141,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":149,"column":22,"nodeType":"144","messageId":"145","endLine":149,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":155,"column":22,"nodeType":"144","messageId":"145","endLine":155,"endColumn":24},{"ruleId":"142","severity":1,"message":"143","line":10,"column":20,"nodeType":"144","messageId":"145","endLine":10,"endColumn":22},{"ruleId":"142","severity":1,"message":"146","line":16,"column":21,"nodeType":"144","messageId":"145","endLine":16,"endColumn":23},{"ruleId":"151","severity":1,"message":"152","line":24,"column":13,"nodeType":"153","endLine":24,"endColumn":53},{"ruleId":"151","severity":1,"message":"152","line":30,"column":13,"nodeType":"153","endLine":30,"endColumn":59},{"ruleId":"151","severity":1,"message":"152","line":36,"column":13,"nodeType":"153","endLine":36,"endColumn":60},{"ruleId":"154","severity":1,"message":"155","line":20,"column":12,"nodeType":"156","messageId":"157","endLine":20,"endColumn":20},{"ruleId":"154","severity":1,"message":"158","line":21,"column":12,"nodeType":"156","messageId":"157","endLine":21,"endColumn":22},{"ruleId":"147","severity":1,"message":"159","line":35,"column":8,"nodeType":"149","endLine":35,"endColumn":10,"suggestions":"160"},{"ruleId":"147","severity":1,"message":"161","line":41,"column":8,"nodeType":"149","endLine":41,"endColumn":16,"suggestions":"162"},{"ruleId":"142","severity":1,"message":"143","line":45,"column":20,"nodeType":"144","messageId":"145","endLine":45,"endColumn":22},{"ruleId":"142","severity":1,"message":"143","line":59,"column":20,"nodeType":"144","messageId":"145","endLine":59,"endColumn":22},{"ruleId":"142","severity":1,"message":"146","line":81,"column":39,"nodeType":"144","messageId":"145","endLine":81,"endColumn":41},{"ruleId":"142","severity":1,"message":"146","line":81,"column":76,"nodeType":"144","messageId":"145","endLine":81,"endColumn":78},{"ruleId":"163","severity":1,"message":"164","line":167,"column":90,"nodeType":"165","messageId":"166","endLine":167,"endColumn":92},{"ruleId":"142","severity":1,"message":"146","line":19,"column":22,"nodeType":"144","messageId":"145","endLine":19,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":19,"column":40,"nodeType":"144","messageId":"145","endLine":19,"endColumn":42},{"ruleId":"142","severity":1,"message":"146","line":20,"column":22,"nodeType":"144","messageId":"145","endLine":20,"endColumn":24},{"ruleId":"142","severity":1,"message":"146","line":20,"column":40,"nodeType":"144","messageId":"145","endLine":20,"endColumn":42},{"ruleId":"147","severity":1,"message":"167","line":78,"column":8,"nodeType":"149","endLine":78,"endColumn":10,"suggestions":"168"},{"ruleId":"142","severity":1,"message":"143","line":126,"column":26,"nodeType":"144","messageId":"145","endLine":126,"endColumn":28},{"ruleId":"147","severity":1,"message":"169","line":129,"column":8,"nodeType":"149","endLine":129,"endColumn":20,"suggestions":"170"},{"ruleId":"147","severity":1,"message":"171","line":146,"column":8,"nodeType":"149","endLine":146,"endColumn":22,"suggestions":"172"},{"ruleId":"142","severity":1,"message":"143","line":245,"column":31,"nodeType":"144","messageId":"145","endLine":245,"endColumn":33},{"ruleId":"142","severity":1,"message":"143","line":312,"column":53,"nodeType":"144","messageId":"145","endLine":312,"endColumn":55},{"ruleId":"142","severity":1,"message":"143","line":312,"column":94,"nodeType":"144","messageId":"145","endLine":312,"endColumn":96},{"ruleId":"142","severity":1,"message":"143","line":319,"column":53,"nodeType":"144","messageId":"145","endLine":319,"endColumn":55},{"ruleId":"142","severity":1,"message":"143","line":319,"column":94,"nodeType":"144","messageId":"145","endLine":319,"endColumn":96},{"ruleId":"142","severity":1,"message":"143","line":346,"column":40,"nodeType":"144","messageId":"145","endLine":346,"endColumn":42},{"ruleId":"142","severity":1,"message":"143","line":346,"column":73,"nodeType":"144","messageId":"145","endLine":346,"endColumn":75},{"ruleId":"142","severity":1,"message":"146","line":350,"column":48,"nodeType":"144","messageId":"145","endLine":350,"endColumn":50},{"ruleId":"142","severity":1,"message":"146","line":353,"column":53,"nodeType":"144","messageId":"145","endLine":353,"endColumn":55},{"ruleId":"142","severity":1,"message":"146","line":358,"column":46,"nodeType":"144","messageId":"145","endLine":358,"endColumn":48},{"ruleId":"142","severity":1,"message":"143","line":361,"column":37,"nodeType":"144","messageId":"145","endLine":361,"endColumn":39},{"ruleId":"142","severity":1,"message":"143","line":361,"column":67,"nodeType":"144","messageId":"145","endLine":361,"endColumn":69},{"ruleId":"142","severity":1,"message":"143","line":366,"column":31,"nodeType":"144","messageId":"145","endLine":366,"endColumn":33},{"ruleId":"142","severity":1,"message":"143","line":446,"column":39,"nodeType":"144","messageId":"145","endLine":446,"endColumn":41},{"ruleId":"142","severity":1,"message":"143","line":446,"column":78,"nodeType":"144","messageId":"145","endLine":446,"endColumn":80},{"ruleId":"163","severity":1,"message":"164","line":447,"column":68,"nodeType":"165","messageId":"166","endLine":447,"endColumn":70},{"ruleId":"142","severity":1,"message":"146","line":454,"column":94,"nodeType":"144","messageId":"145","endLine":454,"endColumn":96},{"ruleId":"142","severity":1,"message":"143","line":481,"column":33,"nodeType":"144","messageId":"145","endLine":481,"endColumn":35},{"ruleId":"142","severity":1,"message":"143","line":481,"column":66,"nodeType":"144","messageId":"145","endLine":481,"endColumn":68},{"ruleId":"163","severity":1,"message":"164","line":482,"column":62,"nodeType":"165","messageId":"166","endLine":482,"endColumn":64},{"ruleId":"142","severity":1,"message":"146","line":486,"column":89,"nodeType":"144","messageId":"145","endLine":486,"endColumn":91},{"ruleId":"151","severity":1,"message":"152","line":15,"column":9,"nodeType":"153","endLine":20,"endColumn":12},{"ruleId":"142","severity":1,"message":"143","line":35,"column":32,"nodeType":"144","messageId":"145","endLine":35,"endColumn":34},{"ruleId":"142","severity":1,"message":"143","line":41,"column":32,"nodeType":"144","messageId":"145","endLine":41,"endColumn":34},{"ruleId":"138","replacedBy":"139"},{"ruleId":"140","replacedBy":"141"},{"ruleId":"142","severity":1,"message":"143","line":70,"column":29,"nodeType":"144","messageId":"145","endLine":70,"endColumn":31},{"ruleId":"154","severity":1,"message":"173","line":2,"column":10,"nodeType":"156","messageId":"157","endLine":2,"endColumn":15},{"ruleId":"147","severity":1,"message":"174","line":27,"column":8,"nodeType":"149","endLine":27,"endColumn":27,"suggestions":"175"},{"ruleId":"142","severity":1,"message":"146","line":33,"column":31,"nodeType":"144","messageId":"145","endLine":33,"endColumn":33},{"ruleId":"142","severity":1,"message":"146","line":98,"column":39,"nodeType":"144","messageId":"145","endLine":98,"endColumn":41},{"ruleId":"142","severity":1,"message":"146","line":99,"column":44,"nodeType":"144","messageId":"145","endLine":99,"endColumn":46},{"ruleId":"142","severity":1,"message":"143","line":107,"column":54,"nodeType":"144","messageId":"145","endLine":107,"endColumn":56},{"ruleId":"142","severity":1,"message":"146","line":110,"column":61,"nodeType":"144","messageId":"145","endLine":110,"endColumn":63},{"ruleId":"142","severity":1,"message":"146","line":114,"column":60,"nodeType":"144","messageId":"145","endLine":114,"endColumn":62},"no-native-reassign",["176"],"no-negated-in-lhs",["177"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","Expected '===' and instead saw '=='.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currentPage'. Either include it or remove the dependency array.","ArrayExpression",["178"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","@typescript-eslint/no-unused-vars","'username' is assigned a value but never used.","Identifier","unusedVar","'totalMoney' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.user.total_money', 'props.user.user_id', and 'props.user.username'. Either include them or remove the dependency array. If 'setUsername' needs the current value of 'props.user.username', you can also switch to useReducer instead of useState and read 'props.user.username' in the reducer.",["179"],"React Hook useEffect has missing dependencies: 'getUserContracts' and 'getUserStocks'. Either include them or remove the dependency array.",["180"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has missing dependencies: 'getCurrentStockDetails', 'getStockOptionPositions', and 'getStockPositions'. Either include them or remove the dependency array.",["181"],"React Hook useEffect has missing dependencies: 'currentStock.symbol', 'expirationInView', and 'getOptions'. Either include them or remove the dependency array.",["182"],"React Hook useEffect has a missing dependency: 'props.stock'. Either include it or remove the dependency array.",["183"],"'error' is defined but never used.","React Hook useEffect has a missing dependency: 'getHistory'. Either include it or remove the dependency array.",["184"],"no-global-assign","no-unsafe-negation",{"desc":"185","fix":"186"},{"desc":"187","fix":"188"},{"desc":"189","fix":"190"},{"desc":"191","fix":"192"},{"desc":"193","fix":"194"},{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},"Update the dependencies array to be: [currentPage, currentUser]",{"range":"199","text":"200"},"Update the dependencies array to be: [props.user.total_money, props.user.user_id, props.user.username]",{"range":"201","text":"202"},"Update the dependencies array to be: [getUserContracts, getUserStocks, userId]",{"range":"203","text":"204"},"Update the dependencies array to be: [getCurrentStockDetails, getStockOptionPositions, getStockPositions]",{"range":"205","text":"206"},"Update the dependencies array to be: [currentStock.symbol, expirationInView, getOptions, optionType]",{"range":"207","text":"208"},"Update the dependencies array to be: [currentStock, props.stock]",{"range":"209","text":"210"},"Update the dependencies array to be: [getHistory, stocksOrContracts]",{"range":"211","text":"212"},[2123,2136],"[currentPage, currentUser]",[1109,1111],"[props.user.total_money, props.user.user_id, props.user.username]",[1197,1205],"[getUserContracts, getUserStocks, userId]",[2432,2434],"[getCurrentStockDetails, getStockOptionPositions, getStockPositions]",[3971,3983],"[currentStock.symbol, expirationInView, getOptions, optionType]",[4349,4363],"[currentStock, props.stock]",[689,708],"[getHistory, stocksOrContracts]"]